{"version":3,"sources":["../../src/driver/aurora-postgres/AuroraPostgresQueryRunner.ts"],"names":[],"mappings":"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","file":"AuroraPostgresQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { IsolationLevel } from \"../types/IsolationLevel\"\r\nimport { AuroraPostgresDriver } from \"./AuroraPostgresDriver\"\r\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\n\r\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\r\n    driver: any\r\n\r\n    constructor(driver: any, mode: ReplicationMode) {\r\n        super(driver, mode)\r\n    }\r\n}\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class AuroraPostgresQueryRunner\r\n    extends PostgresQueryRunnerWrapper\r\n    implements QueryRunner\r\n{\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: AuroraPostgresDriver\r\n\r\n    protected client: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        driver: AuroraPostgresDriver,\r\n        client: any,\r\n        mode: ReplicationMode,\r\n    ) {\r\n        super(driver, mode)\r\n\r\n        this.client = client\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection)\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\r\n            this.databaseConnectionPromise = this.driver\r\n                .obtainSlaveConnection()\r\n                .then(([connection, release]: any[]) => {\r\n                    this.driver.connectedQueryRunners.push(this)\r\n                    this.databaseConnection = connection\r\n                    this.releaseCallback = release\r\n                    return this.databaseConnection\r\n                })\r\n        } else {\r\n            // master\r\n            this.databaseConnectionPromise = this.driver\r\n                .obtainMasterConnection()\r\n                .then(([connection, release]: any[]) => {\r\n                    this.driver.connectedQueryRunners.push(this)\r\n                    this.databaseConnection = connection\r\n                    this.releaseCallback = release\r\n                    return this.databaseConnection\r\n                })\r\n        }\r\n\r\n        return this.databaseConnectionPromise\r\n    }\r\n\r\n    /**\r\n     * Starts transaction on the current connection.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        this.isTransactionActive = true\r\n        try {\r\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\r\n        } catch (err) {\r\n            this.isTransactionActive = false\r\n            throw err\r\n        }\r\n\r\n        if (this.transactionDepth === 0) {\r\n            await this.client.startTransaction()\r\n        } else {\r\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth}`)\r\n        }\r\n        this.transactionDepth += 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\r\n\r\n        if (this.transactionDepth > 1) {\r\n            await this.query(\r\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth - 1}`,\r\n            )\r\n        } else {\r\n            await this.client.commitTransaction()\r\n            this.isTransactionActive = false\r\n        }\r\n        this.transactionDepth -= 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\r\n\r\n        if (this.transactionDepth > 1) {\r\n            await this.query(\r\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth - 1}`,\r\n            )\r\n        } else {\r\n            await this.client.rollbackTransaction()\r\n            this.isTransactionActive = false\r\n        }\r\n        this.transactionDepth -= 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const raw = await this.client.query(query, parameters)\r\n\r\n        const result = new QueryResult()\r\n\r\n        result.raw = raw\r\n\r\n        if (raw?.hasOwnProperty(\"records\") && Array.isArray(raw.records)) {\r\n            result.records = raw.records\r\n        }\r\n\r\n        if (raw?.hasOwnProperty(\"numberOfRecordsUpdated\")) {\r\n            result.affected = raw.numberOfRecordsUpdated\r\n        }\r\n\r\n        if (!useStructuredResult) {\r\n            return result.raw\r\n        }\r\n\r\n        return result\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}