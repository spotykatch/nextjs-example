{"version":3,"sources":["../../src/commands/CacheClearCommand.ts"],"names":[],"mappings":";;;;AAEA,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AACvB,8DAA6B;AAC7B,iDAA6C;AAE7C;;GAEG;AACH,MAAa,iBAAiB;IAA9B;QACI,YAAO,GAAG,aAAa,CAAA;QACvB,aAAQ,GAAG,+CAA+C,CAAA;IA8C9D,CAAC;IA5CG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YAC7B,KAAK,EAAE,GAAG;YACV,QAAQ,EACJ,6DAA6D;YACjE,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,UAAU,GAA2B,SAAS,CAAA;QAClD,IAAI;YACA,UAAU,GAAG,MAAM,2BAAY,CAAC,cAAc,CAC1C,cAAI,CAAC,OAAO,CAAC,iBAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAoB,CAAC,CACzD,CAAA;YACD,UAAU,CAAC,UAAU,CAAC;gBAClB,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,CAAC,QAAQ,CAAC;aACtB,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE;gBAC9B,6BAAa,CAAC,SAAS,CACnB,2EAA2E,CAC9E,CAAA;gBACD,OAAM;aACT;YAED,MAAM,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;YACzC,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAA;YAE1D,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;SAC7B;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,2BAA2B,EAAE,GAAG,CAAC,CAAA;YAEzD,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa;gBACtC,MAAO,UAAyB,CAAC,OAAO,EAAE,CAAA;YAE9C,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;CACJ;AAhDD,8CAgDC","file":"CacheClearCommand.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\r\nimport * as yargs from \"yargs\"\r\nimport chalk from \"chalk\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport path from \"path\"\r\nimport process from \"process\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Clear cache command.\r\n */\r\nexport class CacheClearCommand implements yargs.CommandModule {\r\n    command = \"cache:clear\"\r\n    describe = \"Clears all data stored in query runner cache.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args.option(\"dataSource\", {\r\n            alias: \"d\",\r\n            describe:\r\n                \"Path to the file where your DataSource instance is defined.\",\r\n            demandOption: true,\r\n        })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        let dataSource: DataSource | undefined = undefined\r\n        try {\r\n            dataSource = await CommandUtils.loadDataSource(\r\n                path.resolve(process.cwd(), args.dataSource as string),\r\n            )\r\n            dataSource.setOptions({\r\n                subscribers: [],\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: [\"schema\"],\r\n            })\r\n            await dataSource.initialize()\r\n\r\n            if (!dataSource.queryResultCache) {\r\n                PlatformTools.logCmdErr(\r\n                    \"Cache is not enabled. To use cache enable it in connection configuration.\",\r\n                )\r\n                return\r\n            }\r\n\r\n            await dataSource.queryResultCache.clear()\r\n            console.log(chalk.green(\"Cache was successfully cleared\"))\r\n\r\n            await dataSource.destroy()\r\n        } catch (err) {\r\n            PlatformTools.logCmdErr(\"Error during cache clear.\", err)\r\n\r\n            if (dataSource && dataSource.isInitialized)\r\n                await (dataSource as DataSource).destroy()\r\n\r\n            process.exit(1)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}