{"version":3,"sources":["../../src/util/ImportUtils.ts"],"names":[],"mappings":";;;;AAAA,oDAAmB;AACnB,wDAAuB;AACvB,6BAAmC;AAE5B,KAAK,UAAU,mBAAmB,CACrC,QAAgB;IAEhB,MAAM,WAAW,GAAG,KAAK,IAA2B,EAAE;QAClD,qFAAqF;QACrF,oDAAoD;QACpD,OAAO;YACH,MAAM,QAAQ,CAAC,qCAAqC,CAAC,EAAE,CACnD,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;gBAC1B,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,IAAA,mBAAa,EAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAC3C;YACD,KAAK;SACR,CAAA;IACL,CAAC,CAAA;IACD,MAAM,YAAY,GAAG,KAAK,IAAgC,EAAE;QACxD,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,CAAA;IAC1C,CAAC,CAAA;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAA;IAE5E,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;QAAE,OAAO,WAAW,EAAE,CAAA;SAC/D,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;QAAE,OAAO,YAAY,EAAE,CAAA;SACrE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,EAAE;QAC/C,MAAM,WAAW,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,WAAW,IAAI,IAAI,EAAE;YACrB,MAAM,QAAQ,GAAG,CAAC,WAAmB,aAAnB,WAAW,uBAAX,WAAW,CAAU,IAAI,MAAK,QAAQ,CAAA;YAExD,IAAI,QAAQ;gBAAE,OAAO,WAAW,EAAE,CAAA;;gBAC7B,OAAO,YAAY,EAAE,CAAA;SAC7B;;YAAM,OAAO,YAAY,EAAE,CAAA;KAC/B;IAED,OAAO,YAAY,EAAE,CAAA;AACzB,CAAC;AAnCD,kDAmCC;AAED,SAAS,qBAAqB,CAAC,QAAgB;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QAC1B,IAAI,WAAW,GAAG,QAAQ,CAAA;QAE1B,SAAS,iBAAiB;YACtB,MAAM,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YAE1C,IAAI,WAAW,KAAK,QAAQ;gBACxB,sCAAsC;gBACtC,MAAM,CAAC,IAAI,CAAC,CAAA;iBACX;gBACD,WAAW,GAAG,QAAQ,CAAA;gBACtB,MAAM,oBAAoB,GAAG,cAAI,CAAC,IAAI,CAClC,WAAW,EACX,cAAc,CACjB,CAAA;gBAED,YAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACzC,IAAI,GAAG,IAAI,IAAI;wBAAE,iBAAiB,EAAE,CAAA;yBAC/B,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;wBACrB,YAAE,CAAC,QAAQ,CACP,oBAAoB,EACpB,MAAM,EACN,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;4BACV,IAAI,GAAG,IAAI,IAAI;gCAAE,MAAM,CAAC,IAAI,CAAC,CAAA;iCACxB;gCACD,IAAI;oCACA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;iCAC3B;gCAAC,OAAO,GAAG,EAAE;oCACV,MAAM,CAAC,IAAI,CAAC,CAAA;iCACf;6BACJ;wBACL,CAAC,CACJ,CAAA;qBACJ;;wBAAM,iBAAiB,EAAE,CAAA;gBAC9B,CAAC,CAAC,CAAA;aACL;QACL,CAAC;QAED,iBAAiB,EAAE,CAAA;IACvB,CAAC,CAAC,CAAA;AACN,CAAC","file":"ImportUtils.js","sourcesContent":["import fs from \"fs\"\r\nimport path from \"path\"\r\nimport { pathToFileURL } from \"url\"\r\n\r\nexport async function importOrRequireFile(\r\n    filePath: string,\r\n): Promise<[result: any, moduleType: \"esm\" | \"commonjs\"]> {\r\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\r\n        // `Function` is required to make sure the `import` statement wil stay `import` after\r\n        // transpilation and won't be converted to `require`\r\n        return [\r\n            await Function(\"return filePath => import(filePath)\")()(\r\n                filePath.startsWith(\"file://\")\r\n                    ? filePath\r\n                    : pathToFileURL(filePath).toString(),\r\n            ),\r\n            \"esm\",\r\n        ]\r\n    }\r\n    const tryToRequire = async (): Promise<[any, \"commonjs\"]> => {\r\n        return [require(filePath), \"commonjs\"]\r\n    }\r\n\r\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length)\r\n\r\n    if (extension === \"mjs\" || extension === \"mts\") return tryToImport()\r\n    else if (extension === \"cjs\" || extension === \"cts\") return tryToRequire()\r\n    else if (extension === \"js\" || extension === \"ts\") {\r\n        const packageJson = await getNearestPackageJson(filePath)\r\n\r\n        if (packageJson != null) {\r\n            const isModule = (packageJson as any)?.type === \"module\"\r\n\r\n            if (isModule) return tryToImport()\r\n            else return tryToRequire()\r\n        } else return tryToRequire()\r\n    }\r\n\r\n    return tryToRequire()\r\n}\r\n\r\nfunction getNearestPackageJson(filePath: string): Promise<object | null> {\r\n    return new Promise((accept) => {\r\n        let currentPath = filePath\r\n\r\n        function searchPackageJson() {\r\n            const nextPath = path.dirname(currentPath)\r\n\r\n            if (currentPath === nextPath)\r\n                // the top of the file tree is reached\r\n                accept(null)\r\n            else {\r\n                currentPath = nextPath\r\n                const potentialPackageJson = path.join(\r\n                    currentPath,\r\n                    \"package.json\",\r\n                )\r\n\r\n                fs.stat(potentialPackageJson, (err, stats) => {\r\n                    if (err != null) searchPackageJson()\r\n                    else if (stats.isFile()) {\r\n                        fs.readFile(\r\n                            potentialPackageJson,\r\n                            \"utf8\",\r\n                            (err, data) => {\r\n                                if (err != null) accept(null)\r\n                                else {\r\n                                    try {\r\n                                        accept(JSON.parse(data))\r\n                                    } catch (err) {\r\n                                        accept(null)\r\n                                    }\r\n                                }\r\n                            },\r\n                        )\r\n                    } else searchPackageJson()\r\n                })\r\n            }\r\n        }\r\n\r\n        searchPackageJson()\r\n    })\r\n}\r\n"],"sourceRoot":".."}