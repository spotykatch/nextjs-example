{"version":3,"sources":["../browser/src/driver/sqlite/SqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\"\r\nimport { SqliteDriver } from \"./SqliteDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqliteDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqliteDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`)\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const connection = this.driver.connection\r\n        const options = connection.options as SqliteConnectionOptions\r\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime\r\n\r\n        if (!connection.isInitialized) {\r\n            throw new ConnectionIsNotSetError(\"sqlite\")\r\n        }\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            const databaseConnection = await this.connect()\r\n            this.driver.connection.logger.logQuery(query, parameters, this)\r\n            const queryStartTime = +new Date()\r\n            const isInsertQuery = query.startsWith(\"INSERT \")\r\n            const isDeleteQuery = query.startsWith(\"DELETE \")\r\n            const isUpdateQuery = query.startsWith(\"UPDATE \")\r\n\r\n            const execute = async () => {\r\n                if (isInsertQuery || isDeleteQuery || isUpdateQuery) {\r\n                    await databaseConnection.run(query, parameters, handler)\r\n                } else {\r\n                    await databaseConnection.all(query, parameters, handler)\r\n                }\r\n            }\r\n\r\n            const handler = function (err: any, rows: any) {\r\n                if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\r\n                    if (\r\n                        typeof options.busyErrorRetry === \"number\" &&\r\n                        options.busyErrorRetry > 0\r\n                    ) {\r\n                        setTimeout(execute, options.busyErrorRetry)\r\n                        return\r\n                    }\r\n                }\r\n\r\n                // log slow queries if maxQueryExecution time is set\r\n                const queryEndTime = +new Date()\r\n                const queryExecutionTime = queryEndTime - queryStartTime\r\n                if (\r\n                    maxQueryExecutionTime &&\r\n                    queryExecutionTime > maxQueryExecutionTime\r\n                )\r\n                    connection.logger.logQuerySlow(\r\n                        queryExecutionTime,\r\n                        query,\r\n                        parameters,\r\n                        this,\r\n                    )\r\n\r\n                if (err) {\r\n                    connection.logger.logQueryError(\r\n                        err,\r\n                        query,\r\n                        parameters,\r\n                        this,\r\n                    )\r\n                    fail(new QueryFailedError(query, parameters, err))\r\n                } else {\r\n                    const result = new QueryResult()\r\n\r\n                    if (isInsertQuery) {\r\n                        result.raw = this[\"lastID\"]\r\n                    } else {\r\n                        result.raw = rows\r\n                    }\r\n\r\n                    if (Array.isArray(rows)) {\r\n                        result.records = rows\r\n                    }\r\n\r\n                    result.affected = this[\"changes\"]\r\n\r\n                    if (useStructuredResult) {\r\n                        ok(result)\r\n                    } else {\r\n                        ok(result.raw)\r\n                    }\r\n                }\r\n            }\r\n\r\n            await execute()\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}